name: 🚀 DEX CLOB CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📥 Install dependencies - Matching Engine
      run: |
        cd dex-clob-project/backend/matching-engine
        npm ci
        
    - name: 📥 Install dependencies - Vault Manager  
      run: |
        cd dex-clob-project/backend/vault-manager
        npm ci
        
    - name: 📥 Install dependencies - Shared
      run: |
        cd dex-clob-project/backend/shared
        npm ci
        
    - name: 📥 Install dependencies - Contracts
      run: |
        cd dex-clob-project/contracts
        npm ci
        
    - name: 🔨 Build - Shared
      run: |
        cd dex-clob-project/backend/shared
        npm run build
        
    - name: 🔨 Build - Matching Engine
      run: |
        cd dex-clob-project/backend/matching-engine
        npm run build
        
    - name: 🔨 Build - Vault Manager
      run: |
        cd dex-clob-project/backend/vault-manager
        npm run build
        
    - name: 🔨 Build - Contracts
      run: |
        cd dex-clob-project/contracts
        npm run compile
        
    - name: 🧪 Run tests - Contracts
      run: |
        cd dex-clob-project/contracts
        npm test
        
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🛡️ Run security audit
      run: |
        cd dex-clob-project/backend/matching-engine && npm audit --audit-level moderate
        cd ../vault-manager && npm audit --audit-level moderate
        cd ../shared && npm audit --audit-level moderate
        cd ../../contracts && npm audit --audit-level moderate
        
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔨 Build Docker images
      run: |
        cd dex-clob-project
        docker-compose build --no-cache
        
    - name: 🧪 Test Docker compose
      run: |
        cd dex-clob-project
        docker-compose config
        
  deploy:
    name: 🚀 Deploy (Production)
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏷️ Create Release Tag
      if: github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        export VERSION=$(date +%Y.%m.%d.%H%M)
        git tag "v$VERSION"
        echo "VERSION=v$VERSION" >> $GITHUB_ENV
        
    - name: 📋 Create Release Notes
      if: github.event_name == 'push'
      run: |
        echo "## 🚀 Release ${{ env.VERSION }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### ✨ What's New" >> release_notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📊 Project Stats" >> release_notes.md
        echo "- **Total Lines of Code**: $(find . -name '*.ts' -o -name '*.sol' | xargs wc -l | tail -1)" >> release_notes.md
        echo "- **Build Status**: ✅ Passing" >> release_notes.md
        echo "- **Test Coverage**: 📊 In Progress" >> release_notes.md
        
    - name: 🎉 Create GitHub Release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: 🚀 DEX CLOB Release ${{ env.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
