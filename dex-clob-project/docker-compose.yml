version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dex-postgres
    environment:
      POSTGRES_DB: dex_clob
      POSTGRES_USER: dex_user
      POSTGRES_PASSWORD: dex_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - dex-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dex-network
    command: redis-server --appendonly yes

  # Matching Engine
  matching-engine:
    build:
      context: ./backend
      dockerfile: matching-engine/Dockerfile
    container_name: dex-matching-engine
    environment:
      NODE_ENV: development
      PORT: 3001
      HOST: 0.0.0.0
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: dex_clob
      POSTGRES_USER: dex_user
      POSTGRES_PASSWORD: dex_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NODE_OPTIONS: "--dns-result-order=ipv4first"
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - dex-network
    volumes:
      - ./backend/matching-engine/logs:/app/logs
    restart: unless-stopped

  # Batch Settler
  batch-settler:
    build:
      context: ./backend/batch-settler
      dockerfile: Dockerfile
    container_name: dex-batch-settler
    environment:
      NODE_ENV: development
      PORT: 3002
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: dex_clob
      POSTGRES_USER: dex_user
      POSTGRES_PASSWORD: dex_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MATCHING_ENGINE_URL: http://matching-engine:3001
    ports:
      - "3002:3002"
      - "3003:3003"  # Metrics port
    depends_on:
      - postgres
      - redis
      - matching-engine
    networks:
      - dex-network
    volumes:
      - ./backend/batch-settler/logs:/app/logs
    restart: unless-stopped

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: dex-frontend
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - matching-engine
    networks:
      - dex-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: dex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - matching-engine
      - batch-settler
      - frontend
    networks:
      - dex-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: dex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - dex-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: dex-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3004:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - dex-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  dex-network:
    driver: bridge
