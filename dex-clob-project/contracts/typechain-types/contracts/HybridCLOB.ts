/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace HybridCLOB {
  export type SettlementBatchStruct = {
    batchId: PromiseOrValue<BigNumberish>;
    tradeIds: PromiseOrValue<BigNumberish>[];
    timestamp: PromiseOrValue<BigNumberish>;
    settler: PromiseOrValue<string>;
    merkleRoot: PromiseOrValue<BytesLike>;
  };

  export type SettlementBatchStructOutput = [
    BigNumber,
    BigNumber[],
    BigNumber,
    string,
    string
  ] & {
    batchId: BigNumber;
    tradeIds: BigNumber[];
    timestamp: BigNumber;
    settler: string;
    merkleRoot: string;
  };

  export type OrderStruct = {
    id: PromiseOrValue<BigNumberish>;
    trader: PromiseOrValue<string>;
    baseToken: PromiseOrValue<string>;
    quoteToken: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    side: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    filledAmount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    expiresAt: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type OrderStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    id: BigNumber;
    trader: string;
    baseToken: string;
    quoteToken: string;
    amount: BigNumber;
    price: BigNumber;
    side: number;
    status: number;
    filledAmount: BigNumber;
    timestamp: BigNumber;
    expiresAt: BigNumber;
    signature: string;
  };

  export type TradeStruct = {
    buyOrderId: PromiseOrValue<BigNumberish>;
    sellOrderId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    buyer: PromiseOrValue<string>;
    seller: PromiseOrValue<string>;
  };

  export type TradeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    buyOrderId: BigNumber;
    sellOrderId: BigNumber;
    amount: BigNumber;
    price: BigNumber;
    timestamp: BigNumber;
    buyer: string;
    seller: string;
  };
}

export interface HybridCLOBInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EMERGENCY_ROLE()": FunctionFragment;
    "FEE_DENOMINATOR()": FunctionFragment;
    "MAX_BATCH_SIZE()": FunctionFragment;
    "ORDER_EXPIRY_TIME()": FunctionFragment;
    "SETTLER_ROLE()": FunctionFragment;
    "addTradingPair(address,address)": FunctionFragment;
    "batches(uint256)": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "emergencyCancelOrders(uint256[])": FunctionFragment;
    "emergencyWithdraw(address,uint256,address)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "getBatch(uint256)": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTrade(uint256)": FunctionFragment;
    "getUserActiveOrders(address)": FunctionFragment;
    "getUserOrders(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isTradingPairSupported(address,address)": FunctionFragment;
    "makerFee()": FunctionFragment;
    "nextBatchId()": FunctionFragment;
    "nextOrderId()": FunctionFragment;
    "nextTradeId()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "placeOrder(address,address,uint256,uint256,uint8,uint256)": FunctionFragment;
    "processedBatches(bytes32)": FunctionFragment;
    "removeTradingPair(address,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setFees(uint256,uint256)": FunctionFragment;
    "settleBatch(uint256[],uint256[],uint256[],uint256[],bytes32)": FunctionFragment;
    "supportedTradingPairs(address,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "takerFee()": FunctionFragment;
    "trades(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "userOrders(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_ROLE"
      | "FEE_DENOMINATOR"
      | "MAX_BATCH_SIZE"
      | "ORDER_EXPIRY_TIME"
      | "SETTLER_ROLE"
      | "addTradingPair"
      | "batches"
      | "cancelOrder"
      | "emergencyCancelOrders"
      | "emergencyWithdraw"
      | "feeRecipient"
      | "getBatch"
      | "getOrder"
      | "getRoleAdmin"
      | "getTrade"
      | "getUserActiveOrders"
      | "getUserOrders"
      | "grantRole"
      | "hasRole"
      | "isTradingPairSupported"
      | "makerFee"
      | "nextBatchId"
      | "nextOrderId"
      | "nextTradeId"
      | "orders"
      | "pause"
      | "paused"
      | "placeOrder"
      | "processedBatches"
      | "removeTradingPair"
      | "renounceRole"
      | "revokeRole"
      | "setFeeRecipient"
      | "setFees"
      | "settleBatch"
      | "supportedTradingPairs"
      | "supportsInterface"
      | "takerFee"
      | "trades"
      | "unpause"
      | "userOrders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDER_EXPIRY_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SETTLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTradingPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batches",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCancelOrders",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActiveOrders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOrders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTradingPairSupported",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "makerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTradeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processedBatches",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTradingPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBatch",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTradingPairs",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "takerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trades",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BATCH_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_EXPIRY_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SETTLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTradingPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserActiveOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTradingPairSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTradeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTradingPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTradingPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takerFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trades", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userOrders", data: BytesLike): Result;

  events: {
    "BatchSettled(uint256,uint256,address,uint256)": EventFragment;
    "FeesUpdated(uint256,uint256)": EventFragment;
    "OrderCancelled(uint256,address,uint256)": EventFragment;
    "OrderMatched(uint256,uint256,uint256,uint256,uint256,address,address,uint256)": EventFragment;
    "OrderPlaced(uint256,address,address,address,uint256,uint256,uint8,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TradingPairAdded(address,address)": EventFragment;
    "TradingPairRemoved(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderMatched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingPairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingPairRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BatchSettledEventObject {
  batchId: BigNumber;
  tradesCount: BigNumber;
  settler: string;
  timestamp: BigNumber;
}
export type BatchSettledEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  BatchSettledEventObject
>;

export type BatchSettledEventFilter = TypedEventFilter<BatchSettledEvent>;

export interface FeesUpdatedEventObject {
  makerFee: BigNumber;
  takerFee: BigNumber;
}
export type FeesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeesUpdatedEventObject
>;

export type FeesUpdatedEventFilter = TypedEventFilter<FeesUpdatedEvent>;

export interface OrderCancelledEventObject {
  orderId: BigNumber;
  trader: string;
  timestamp: BigNumber;
}
export type OrderCancelledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderMatchedEventObject {
  tradeId: BigNumber;
  buyOrderId: BigNumber;
  sellOrderId: BigNumber;
  amount: BigNumber;
  price: BigNumber;
  buyer: string;
  seller: string;
  timestamp: BigNumber;
}
export type OrderMatchedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ],
  OrderMatchedEventObject
>;

export type OrderMatchedEventFilter = TypedEventFilter<OrderMatchedEvent>;

export interface OrderPlacedEventObject {
  orderId: BigNumber;
  trader: string;
  baseToken: string;
  quoteToken: string;
  amount: BigNumber;
  price: BigNumber;
  side: number;
  timestamp: BigNumber;
}
export type OrderPlacedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber, number, BigNumber],
  OrderPlacedEventObject
>;

export type OrderPlacedEventFilter = TypedEventFilter<OrderPlacedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TradingPairAddedEventObject {
  baseToken: string;
  quoteToken: string;
}
export type TradingPairAddedEvent = TypedEvent<
  [string, string],
  TradingPairAddedEventObject
>;

export type TradingPairAddedEventFilter =
  TypedEventFilter<TradingPairAddedEvent>;

export interface TradingPairRemovedEventObject {
  baseToken: string;
  quoteToken: string;
}
export type TradingPairRemovedEvent = TypedEvent<
  [string, string],
  TradingPairRemovedEventObject
>;

export type TradingPairRemovedEventFilter =
  TypedEventFilter<TradingPairRemovedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface HybridCLOB extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HybridCLOBInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BATCH_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORDER_EXPIRY_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    SETTLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addTradingPair(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        batchId: BigNumber;
        timestamp: BigNumber;
        settler: string;
        merkleRoot: string;
      }
    >;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyCancelOrders(
      orderIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getBatch(
      batchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[HybridCLOB.SettlementBatchStructOutput]>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[HybridCLOB.OrderStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[HybridCLOB.TradeStructOutput]>;

    getUserActiveOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTradingPairSupported(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    makerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextBatchId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextTradeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        trader: string;
        baseToken: string;
        quoteToken: string;
        amount: BigNumber;
        price: BigNumber;
        side: number;
        status: number;
        filledAmount: BigNumber;
        timestamp: BigNumber;
        expiresAt: BigNumber;
        signature: string;
      }
    >;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    placeOrder(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      side: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processedBatches(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeTradingPair(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _makerFee: PromiseOrValue<BigNumberish>,
      _takerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleBatch(
      buyOrderIds: PromiseOrValue<BigNumberish>[],
      sellOrderIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      batchHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedTradingPairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    takerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        buyOrderId: BigNumber;
        sellOrderId: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
        buyer: string;
        seller: string;
      }
    >;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EMERGENCY_ROLE(overrides?: CallOverrides): Promise<string>;

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BATCH_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  ORDER_EXPIRY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  SETTLER_ROLE(overrides?: CallOverrides): Promise<string>;

  addTradingPair(
    baseToken: PromiseOrValue<string>,
    quoteToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batches(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      batchId: BigNumber;
      timestamp: BigNumber;
      settler: string;
      merkleRoot: string;
    }
  >;

  cancelOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyCancelOrders(
    orderIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getBatch(
    batchId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<HybridCLOB.SettlementBatchStructOutput>;

  getOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<HybridCLOB.OrderStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTrade(
    tradeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<HybridCLOB.TradeStructOutput>;

  getUserActiveOrders(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserOrders(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTradingPairSupported(
    baseToken: PromiseOrValue<string>,
    quoteToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  makerFee(overrides?: CallOverrides): Promise<BigNumber>;

  nextBatchId(overrides?: CallOverrides): Promise<BigNumber>;

  nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  nextTradeId(overrides?: CallOverrides): Promise<BigNumber>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      trader: string;
      baseToken: string;
      quoteToken: string;
      amount: BigNumber;
      price: BigNumber;
      side: number;
      status: number;
      filledAmount: BigNumber;
      timestamp: BigNumber;
      expiresAt: BigNumber;
      signature: string;
    }
  >;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  placeOrder(
    baseToken: PromiseOrValue<string>,
    quoteToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    side: PromiseOrValue<BigNumberish>,
    expiresAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processedBatches(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeTradingPair(
    baseToken: PromiseOrValue<string>,
    quoteToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    callerConfirmation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _makerFee: PromiseOrValue<BigNumberish>,
    _takerFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleBatch(
    buyOrderIds: PromiseOrValue<BigNumberish>[],
    sellOrderIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    prices: PromiseOrValue<BigNumberish>[],
    batchHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedTradingPairs(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  takerFee(overrides?: CallOverrides): Promise<BigNumber>;

  trades(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
      buyOrderId: BigNumber;
      sellOrderId: BigNumber;
      amount: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
      buyer: string;
      seller: string;
    }
  >;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userOrders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<string>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BATCH_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_EXPIRY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    SETTLER_ROLE(overrides?: CallOverrides): Promise<string>;

    addTradingPair(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    batches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        batchId: BigNumber;
        timestamp: BigNumber;
        settler: string;
        merkleRoot: string;
      }
    >;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyCancelOrders(
      orderIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getBatch(
      batchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<HybridCLOB.SettlementBatchStructOutput>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<HybridCLOB.OrderStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<HybridCLOB.TradeStructOutput>;

    getUserActiveOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTradingPairSupported(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makerFee(overrides?: CallOverrides): Promise<BigNumber>;

    nextBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    nextTradeId(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        trader: string;
        baseToken: string;
        quoteToken: string;
        amount: BigNumber;
        price: BigNumber;
        side: number;
        status: number;
        filledAmount: BigNumber;
        timestamp: BigNumber;
        expiresAt: BigNumber;
        signature: string;
      }
    >;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    placeOrder(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      side: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processedBatches(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeTradingPair(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _makerFee: PromiseOrValue<BigNumberish>,
      _takerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBatch(
      buyOrderIds: PromiseOrValue<BigNumberish>[],
      sellOrderIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      batchHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedTradingPairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takerFee(overrides?: CallOverrides): Promise<BigNumber>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        buyOrderId: BigNumber;
        sellOrderId: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
        buyer: string;
        seller: string;
      }
    >;

    unpause(overrides?: CallOverrides): Promise<void>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BatchSettled(uint256,uint256,address,uint256)"(
      batchId?: PromiseOrValue<BigNumberish> | null,
      tradesCount?: null,
      settler?: PromiseOrValue<string> | null,
      timestamp?: null
    ): BatchSettledEventFilter;
    BatchSettled(
      batchId?: PromiseOrValue<BigNumberish> | null,
      tradesCount?: null,
      settler?: PromiseOrValue<string> | null,
      timestamp?: null
    ): BatchSettledEventFilter;

    "FeesUpdated(uint256,uint256)"(
      makerFee?: null,
      takerFee?: null
    ): FeesUpdatedEventFilter;
    FeesUpdated(makerFee?: null, takerFee?: null): FeesUpdatedEventFilter;

    "OrderCancelled(uint256,address,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      timestamp?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      orderId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      timestamp?: null
    ): OrderCancelledEventFilter;

    "OrderMatched(uint256,uint256,uint256,uint256,uint256,address,address,uint256)"(
      tradeId?: PromiseOrValue<BigNumberish> | null,
      buyOrderId?: PromiseOrValue<BigNumberish> | null,
      sellOrderId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      price?: null,
      buyer?: null,
      seller?: null,
      timestamp?: null
    ): OrderMatchedEventFilter;
    OrderMatched(
      tradeId?: PromiseOrValue<BigNumberish> | null,
      buyOrderId?: PromiseOrValue<BigNumberish> | null,
      sellOrderId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      price?: null,
      buyer?: null,
      seller?: null,
      timestamp?: null
    ): OrderMatchedEventFilter;

    "OrderPlaced(uint256,address,address,address,uint256,uint256,uint8,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: null,
      amount?: null,
      price?: null,
      side?: null,
      timestamp?: null
    ): OrderPlacedEventFilter;
    OrderPlaced(
      orderId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: null,
      amount?: null,
      price?: null,
      side?: null,
      timestamp?: null
    ): OrderPlacedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TradingPairAdded(address,address)"(
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null
    ): TradingPairAddedEventFilter;
    TradingPairAdded(
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null
    ): TradingPairAddedEventFilter;

    "TradingPairRemoved(address,address)"(
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null
    ): TradingPairRemovedEventFilter;
    TradingPairRemoved(
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null
    ): TradingPairRemovedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BATCH_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_EXPIRY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    SETTLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addTradingPair(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyCancelOrders(
      orderIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getBatch(
      batchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserActiveOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTradingPairSupported(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerFee(overrides?: CallOverrides): Promise<BigNumber>;

    nextBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    nextTradeId(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrder(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      side: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processedBatches(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTradingPair(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFees(
      _makerFee: PromiseOrValue<BigNumberish>,
      _takerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleBatch(
      buyOrderIds: PromiseOrValue<BigNumberish>[],
      sellOrderIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      batchHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedTradingPairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerFee(overrides?: CallOverrides): Promise<BigNumber>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BATCH_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORDER_EXPIRY_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SETTLER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTradingPair(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyCancelOrders(
      orderIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBatch(
      batchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserActiveOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTradingPairSupported(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextBatchId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTradeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeOrder(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      side: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processedBatches(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTradingPair(
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _makerFee: PromiseOrValue<BigNumberish>,
      _takerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleBatch(
      buyOrderIds: PromiseOrValue<BigNumberish>[],
      sellOrderIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      batchHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedTradingPairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
